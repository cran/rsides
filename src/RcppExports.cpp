// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SIDES
double SIDES(const NumericVector& ancova_outcome_arg, const NumericVector& ancova_censor_arg, const NumericVector& ancova_treatment_arg, const NumericMatrix& cont_covariates, const NumericMatrix& class_covariates, const int& n_cont_covariates, const int& n_class_covariates, const std::string project_filename, const std::string output_filename);
RcppExport SEXP _rsides_SIDES(SEXP ancova_outcome_argSEXP, SEXP ancova_censor_argSEXP, SEXP ancova_treatment_argSEXP, SEXP cont_covariatesSEXP, SEXP class_covariatesSEXP, SEXP n_cont_covariatesSEXP, SEXP n_class_covariatesSEXP, SEXP project_filenameSEXP, SEXP output_filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_outcome_arg(ancova_outcome_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_censor_arg(ancova_censor_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_treatment_arg(ancova_treatment_argSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type cont_covariates(cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type class_covariates(class_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cont_covariates(n_cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_class_covariates(n_class_covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type project_filename(project_filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_filename(output_filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(SIDES(ancova_outcome_arg, ancova_censor_arg, ancova_treatment_arg, cont_covariates, class_covariates, n_cont_covariates, n_class_covariates, project_filename, output_filename));
    return rcpp_result_gen;
END_RCPP
}
// SIDESAdjP
NumericVector SIDESAdjP(const NumericVector& ancova_outcome_arg, const NumericVector& ancova_censor_arg, const NumericVector& ancova_treatment_arg, const NumericMatrix& cont_covariates, const NumericMatrix& class_covariates, const int& n_cont_covariates, const int& n_class_covariates, const int& random_seed, const std::string project_filename);
RcppExport SEXP _rsides_SIDESAdjP(SEXP ancova_outcome_argSEXP, SEXP ancova_censor_argSEXP, SEXP ancova_treatment_argSEXP, SEXP cont_covariatesSEXP, SEXP class_covariatesSEXP, SEXP n_cont_covariatesSEXP, SEXP n_class_covariatesSEXP, SEXP random_seedSEXP, SEXP project_filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_outcome_arg(ancova_outcome_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_censor_arg(ancova_censor_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_treatment_arg(ancova_treatment_argSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type cont_covariates(cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type class_covariates(class_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cont_covariates(n_cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_class_covariates(n_class_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< const std::string >::type project_filename(project_filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(SIDESAdjP(ancova_outcome_arg, ancova_censor_arg, ancova_treatment_arg, cont_covariates, class_covariates, n_cont_covariates, n_class_covariates, random_seed, project_filename));
    return rcpp_result_gen;
END_RCPP
}
// FixedSIDEScreenAdjP
NumericVector FixedSIDEScreenAdjP(const NumericVector& ancova_outcome_arg, const NumericVector& ancova_censor_arg, const NumericVector& ancova_treatment_arg, const NumericMatrix& cont_covariates, const NumericMatrix& class_covariates, const int& n_cont_covariates, const int& n_class_covariates, const int& random_seed, const std::string project_file);
RcppExport SEXP _rsides_FixedSIDEScreenAdjP(SEXP ancova_outcome_argSEXP, SEXP ancova_censor_argSEXP, SEXP ancova_treatment_argSEXP, SEXP cont_covariatesSEXP, SEXP class_covariatesSEXP, SEXP n_cont_covariatesSEXP, SEXP n_class_covariatesSEXP, SEXP random_seedSEXP, SEXP project_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_outcome_arg(ancova_outcome_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_censor_arg(ancova_censor_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_treatment_arg(ancova_treatment_argSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type cont_covariates(cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type class_covariates(class_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cont_covariates(n_cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_class_covariates(n_class_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< const std::string >::type project_file(project_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(FixedSIDEScreenAdjP(ancova_outcome_arg, ancova_censor_arg, ancova_treatment_arg, cont_covariates, class_covariates, n_cont_covariates, n_class_covariates, random_seed, project_file));
    return rcpp_result_gen;
END_RCPP
}
// AdaptiveSIDEScreenAdjP
NumericVector AdaptiveSIDEScreenAdjP(const NumericVector& ancova_outcome_arg, const NumericVector& ancova_censor_arg, const NumericVector& ancova_treatment_arg, const NumericMatrix& cont_covariates, const NumericMatrix& class_covariates, const int& n_cont_covariates, const int& n_class_covariates, const int& random_seed, const std::string project_file, const std::string output_file);
RcppExport SEXP _rsides_AdaptiveSIDEScreenAdjP(SEXP ancova_outcome_argSEXP, SEXP ancova_censor_argSEXP, SEXP ancova_treatment_argSEXP, SEXP cont_covariatesSEXP, SEXP class_covariatesSEXP, SEXP n_cont_covariatesSEXP, SEXP n_class_covariatesSEXP, SEXP random_seedSEXP, SEXP project_fileSEXP, SEXP output_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_outcome_arg(ancova_outcome_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_censor_arg(ancova_censor_argSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ancova_treatment_arg(ancova_treatment_argSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type cont_covariates(cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type class_covariates(class_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cont_covariates(n_cont_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_class_covariates(n_class_covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< const std::string >::type project_file(project_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_file(output_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(AdaptiveSIDEScreenAdjP(ancova_outcome_arg, ancova_censor_arg, ancova_treatment_arg, cont_covariates, class_covariates, n_cont_covariates, n_class_covariates, random_seed, project_file, output_file));
    return rcpp_result_gen;
END_RCPP
}
// Quant
List Quant(const NumericVector& vec_arg, const int& nperc);
RcppExport SEXP _rsides_Quant(SEXP vec_argSEXP, SEXP npercSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type vec_arg(vec_argSEXP);
    Rcpp::traits::input_parameter< const int& >::type nperc(npercSEXP);
    rcpp_result_gen = Rcpp::wrap(Quant(vec_arg, nperc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rsides_SIDES", (DL_FUNC) &_rsides_SIDES, 9},
    {"_rsides_SIDESAdjP", (DL_FUNC) &_rsides_SIDESAdjP, 9},
    {"_rsides_FixedSIDEScreenAdjP", (DL_FUNC) &_rsides_FixedSIDEScreenAdjP, 9},
    {"_rsides_AdaptiveSIDEScreenAdjP", (DL_FUNC) &_rsides_AdaptiveSIDEScreenAdjP, 10},
    {"_rsides_Quant", (DL_FUNC) &_rsides_Quant, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rsides(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
